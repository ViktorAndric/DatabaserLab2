@using DatabaserLab2.Data;
@using DatabaserLab2.Models;
@using Microsoft.EntityFrameworkCore;
@using Blazored.Toast;
@inherits LayoutComponentBase;
@inject StoreDBContext dbContext
@inject IServiceProvider ServiceProvider

<BlazoredToasts/>
<PageTitle>DatabaserLab2</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 d-flex justify-content-between align-items-center">
            <div class="search-container flex-grow-1 d-flex justify-content-center">
                <input type="text" class="form-control search-field" placeholder="Search books..." @bind="@searchTerm" @bind:event="oninput"/>
                 
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <div class="search-results">
                    @foreach (var book in FilteredBooks)
                    {
                        <p>@book.Title</p>
                    }
                    </div>
                }
            </div>

            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Menu
                </button>
                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                    <a class="dropdown-item" href="#">Contact</a>
                    <a class="dropdown-item" href="#">About us</a>
                    <a class="dropdown-item" href="#">Register</a>
                    <a class="dropdown-item" href="#">Logg In</a>
                </div>
            </div>
        </div>
        

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
@code {
    private List<Book> books = new List<Book>();

    protected override async Task OnInitializedAsync()
    {
        using (var scope = ServiceProvider.CreateScope())
        {
            var scopedDbContext = scope.ServiceProvider.GetRequiredService<StoreDBContext>();
            books = await scopedDbContext.Books.ToListAsync();
        }
    }
    private string searchTerm = string.Empty;
    private IEnumerable<Book> FilteredBooks => books.Where(b => b.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
}
